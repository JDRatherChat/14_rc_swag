openapi: 3.1.1
info:
  title: "Test API"
  version: "1.0.0"
  description: "RatherChat's API documentation for managing users, chats, and messages."
  termsOfService: "/tos.md"
  contact:
    name: "RatherChat API Support"
    url: "https://ratherchat.com/support"
    email: "api@ratherchat.com"

servers:
  - url: https://api.ratherchat.com/v1
    description: Production server
  - url: https://staging-api.ratherchat.com/v1
    description: Staging server

paths:
  /users:
    get:
      summary: Testing the yaml
      description: Retrieve a paginated list of users
      operationId: listUsers
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              example:
                users:
                  - id: "123"
                    username: "john_doe"
                    email: "john@example.com"
                total: 50
                page: 1
        '404':
          description: Bad Request
          content:
            application/json:
              example:
                users:
                  - id: "123"
                    username: "john_doe"
                    email: "john@example.com"
                total: 50
                page: 1
    post:
      summary: Create a new user
      description: Create a new user account
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  minLength: 3
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
            example:
              username: "john_doe"
              email: "john@example.com"
              password: "securepass123"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              example:
                id: "123"
                username: "john_doe"
                email: "john@example.com"
                createdAt: "2025-04-10T20:00:00Z"

  /chats:
    get:
      summary: List user's chats
      description: Retrieve a list of chats for the authenticated user
      operationId: listChats
      responses:
        '200':
          description: A list of chats
          content:
            application/json:
              example:
                chats:
                  - id: "chat123"
                    name: "Project Discussion"
                    lastMessage: "See you tomorrow!"
                    updatedAt: "2025-04-10T19:30:00Z"
    post:
      summary: Create a new chat
      description: Create a new chat room or direct message
      operationId: createChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - participants
              properties:
                name:
                  type: string
                participants:
                  type: array
                  items:
                    type: string
            example:
              name: "Project Discussion"
              participants: ["user123", "user456"]
      responses:
        '201':
          description: Chat created successfully
          content:
            application/json:
              example:
                id: "chat123"
                name: "Project Discussion"
                participants: ["user123", "user456"]
                createdAt: "2025-04-10T20:00:00Z"

  /messages/{chatId}:
    parameters:
      - name: chatId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get chat messages
      description: Retrieve messages from a specific chat
      operationId: getChatMessages
      parameters:
        - name: before
          in: query
          description: Get messages before this timestamp
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              example:
                messages:
                  - id: "msg123"
                    content: "Hello team!"
                    sender: "user123"
                    timestamp: "2025-04-10T19:30:00Z"
    post:
      summary: Send message
      description: Send a new message to the chat
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  maxLength: 2000
            example:
              content: "Hello team!"
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              example:
                id: "msg123"
                content: "Hello team!"
                sender: "user123"
                timestamp: "2025-04-10T20:00:00Z"

  /notifications:
    get:
      summary: Get notifications
      description: Retrieve user notifications
      operationId: getNotifications
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              example:
                notifications:
                  - id: "notif123"
                    type: "message"
                    content: "New message in Project Discussion"
                    read: false
                    createdAt: "2025-04-10T19:30:00Z"
    patch:
      summary: Update notifications
      description: Mark notifications as read
      operationId: updateNotifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: string
            example:
              ids: ["notif123", "notif124"]
      responses:
        '200':
          description: Notifications updated successfully
          content:
            application/json:
              example:
                updated: 2
                timestamp: "2025-04-10T20:00:00Z"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - email
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time

    Chat:
      type: object
      required:
        - id
        - name
        - participants
      properties:
        id:
          type: string
        name:
          type: string
        participants:
          type: array
          items:
            type: string
        lastMessage:
          type: string
        updatedAt:
          type: string
          format: date-time

    Message:
      type: object
      required:
        - id
        - content
        - sender
        - timestamp
      properties:
        id:
          type: string
        content:
          type: string
        sender:
          type: string
        timestamp:
          type: string
          format: date-time

    Notification:
      type: object
      required:
        - id
        - type
        - content
      properties:
        id:
          type: string
        type:
          type: string
          enum: [message, mention, system]
        content:
          type: string
        read:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
